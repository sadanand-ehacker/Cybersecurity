
hostname cmd ?


Linux File Structure ->

- Linux uses the forward slash unlike the windows which uses the back slash.
- In linux everything is considered in Files and Directories.
- In linux we can use the same word for naming the file just by changing the capital and small letters in the word like 
  File, file r different files in linux while in windows we can't.
- Linux and MacOS both have the same ansestor Unix, that's why the Linux and MacOS both r somewhat familiar.
- FHS: Filesystem Hierarachy Standards (not all linux systems follow the exact same structure)

- /bin it is also as /usr/bin -> binaries folder, here the programs and applications r stored and the cmds such as ls, cat
 and other basic or everyday functions r stored here.

- /sbin it is also as /usr/sbin -> system binaries folder, this contains the functions that the system administrator will 
use and the standard user does not have access to it without permission, with this u can extend ur file system or configure
ur filesystem.

Both /bin and /sbin contains the files which need to accessible when running in single user mode as oppose to the multi
user mode.
In single user mode that boots u as in a root user to allow u to do system repairs, upgrades or testing, networking is
usually disabled in this mode bcz of the security issues when u install a program in linux it is typically not placed in
these folders

- /boot -> This folder contains everything ur OS needs to boot in means ur boot loaders(grub.cfg) live here, U do not wanna
 play around this directory.

- /cdrom -> it is a legacy folder

- /dev -> Here ur devices live, here u will find ur hardware, a disk for example would be -> /dev/sda
The partition on that disk would be like for ex: sda1, sda2 and so on, u can also find everything here from ur webcam to ur
keyboard, this is an area where applications and drivers will access and rarely a user do anything here.

- /etc -> In this folder all the configurations r stored, configurations here means the things which r system wide such as
'apt', in this folder u will find the list of all ur sources that repos ur system connects to as well as it's various
settings, So it is if u r looking for something that is system wide application and not a per user setting.
whenever u do any change in the /etc files take it's back up
 
In /etc/shadow the passwords for the linux users r stored, the hash used on the file is Blowfish.

- /lib -> This includes lib, lib32 and lib64, These r where the libraries r stored, Libraries r files that the applications
can use to perform various functions, they r required by the binaries in bin and sbin.
Basically here r C programming library file and thode files r needed by commands and apps such as cmds pwd and ls and
all these cmds have libraries attached to them
cmd -> strace -e open 'cmd' // to know which library file is used for which cmd

- /media and /mnt -> In these directories u will find ur other mounted drives, it could be a floppy disk, USB stick, external
hard drive, network drive or even a 2nd hard drive, Media folder wasn't always around it was typically just 'mnt' and that's
where u mounted ur storage devices, nowdays most distros automatically mount deivces for u in the media directory, so the
USB stick that u inserted would be in media -> username -> devicename
/mnt is basically to mount external filesystem Ex NFS
/media is for cdrom mounts

Thier r two directories bcz if u r mounting things manually use the 'mnt' directory and leave the 'media' directory to the
OS to manage, most distros and file manager such as Nautilus, dolphin and PC manFM, u can go to their "other locations" and
here u can access ur other devices, if u had a USB stick plugged in right now it would have been here.
 
- /opt -> Optional Folder, This is where usually manually installed softwares resides, although some software packages found
in repo can also find their way here, Virtual box guest additions is one example, here u can also install the softwares
created ur self, basically the softwares or programs which r not OS apps

- /proc -> Here u will find psuedo files that contains the info about system processes and resources, Ex every process will
have a  directory here which contains all kinds of information on that process, u can found the directories based on the
process ids, this is much like dev where their r no actual files on the system as this is the kernel translating other
information to appear as files, here u can also find the information for the CPU. 
Basically it consists the Running processes
cmd -> cat /proc/cpuinfo
cmd -> cat /proc/uptime	// to know the uptime of ur system

((
- /root -> It is the root users home folder unlike the users home folder it does not contain the typical directories inside
and it does not reside in the home directory, u can store files here if u wish but u need root permissions to access it, the
location of this directory also ensures that root always has access to its home folder in case u have the regular users home
directory stored on another drive which u cannot access.
- root folder is also denoted by sign '/'

- /root -> It is the root user home directory, It is not the same as slash '/', but commonly it is said that slash is root // this is more accurate then the first defination

))

- /run -> This is fairly new and different distros use it in slightly different ways, it's a tempFS filesytem which means it
runs in RAM, this also means that everything in it is gone when the system's rebooted or shutdown, its used for processes
that start early in the boot procedure to store runtime information that they use to function.
 
- /snap -> In this folder where snap packages r stored and r mainly used by ubuntu, Snap packages r completely self-contained
applications that run differently then regular packages and applications.

- /srv -> This is a service directory where service data is stored and it will probably be empty for u but if u run a server
such as a web server or FTP server u would store the files that will be accessed by external users here this allows for
better security since it's at the root of the drive and it also allows u to easily mount this folder from another hard drive.

- /sys -> System folder, it's a way to interact with the kernel, one old ex is writing to a file using VGA switchroo and 
change settings on the graphic card in a hybrid system this directory is similar to the run directory and it's not physically
written to the disk, it's created every time the system boots up, so u wouldn't store anything here and nothing gets 
installed here.

- /tmp -> This is were files r temporarily stored by applications that could be used during a session, Ex-> If u r writing a
document in  a word processor it will regularly save a temporary copy of what u r writing here, so if the application crashes
it can look here to see if there's a recent saved copy that u can recover, This folder is usually emptied when u reboot the
system on occassion u might find some files and directories that remain and could be stuck their bcz the system can't delete
them, this normally isn't a big deal unless their's hundreds of files or the files r taking lot of disk space in which u
might wanna log in as the root user in single user mode then navigate to this folder and manually delete them.

- /usr -> This is the user application space where applications will be installed that r used by the user as opposed to the
bin directory used by the system and system administrator to perform maintenance it's also known as the UNIX system resource
and any applications installed here r considered non-essential for basic system operation installed applications will reside
in one of several places here such as /usr/bin, /usr/sbin, /local/bin, /local/sbin with their required libraries stored in
/usr/local/lib or /usr/lib most prgms that r installed from source code will end up in the local folders many large programs
will install themselves into /usr/share and installed source code such as the kernel 
Source and Header files will go into the /usr/share/src directory, this directory is bit a mess u still have to look in other
places to find things, someone making a certain application might not and here to the standard and could just do what they 
want and also some distros may treat these folders differently as well.
This is where directory for any normal user is created.

- /var -> Variable Directory, it contains files and directories that r expected to grow in size for ex-> /var/crash, holds
info about the processes that have crashed, /var/log contains log files for both the system and many different applications
which will constantly grow in size as u use the system, u will also find here databases for mail and temporary storage for
printer queues which r also known as the spool.

- /home -> In home folder u will see that each user has it's own folder inside of it, the home folder is where u store ur
personal files and documents, and as each user has their own home folder and each user can only access their own unless they
use admin permissions, Some users mount the home folder on a different drive or different partition which allows u to 
reinstall ur system and preserve ur files, the home folder also contains many different directories which store ur 
application settings, a hidden directory is simply one that starts with a period, linux hide these by default u can view
them in File manager by selecting show hidden files or by pressing 'ctrl + h'.
These hedden directories store things like cache some applications like a browser used to store temporary files, other
applications might store thumbnails or information that will be used over and over repeatedly. 
Then u have folders like 'config' and 'local' which store individual application settings, Ex -> geany can be found in 
config any settings which r changed in the geany options r saved here if, U will see that some applications store their
settings straight into the home folder like GIMP, these hidden folders r also where ur desktop settings r saved such as
wallpapers, theme etc, u can also place ur icons in these folders
So that u can have a custom look and easily save them for reuse, these hidden folders r important if wanna back up ur files
and ur settings.

- Linux file structure arrangement - Screenshot(2)

- If u have user level permissions then u can only access the home folder not the root directory.

- To create a hidden file or directory simply put '.' infront of the filename ex -> .filename.ext

- The hash used in windows for the SAM file is md4, NTLM, LM. The SAM file in windows contains the username and passwords.

- Linux -> Shell is a program that takes cmds from the keyboard and gives them to the OS to perform.
  Terminal is a tool that is used to pass your shell cmds, This is a program that opens window and lets u interact with the
  shell.

- Every Linux OS has root folder underwhich all the files resides such as Downloads, Documents etc

- man any_cmd (this gives the manual of the cmd) // we can also use --help in the place of 'man' Ex -> any_cmd --help

- In the 'opt' directory of linux machine u r supposed to put all ur optional programs such as pycharm editor could be put
  in this directory

- To open the path bar in the file manager of linux machine -> ctrl + l

- Workspaces in kali Linux could be used as new windows same like in chrome for opening or doing multiple tasks in mulitple
  workspaces

- Suppose we r in the directory which doesn't have etc folder but we wants to go to etc directly without going every path
back then we can use '/' as -> cd /etc/  //as the '/' is the base folder location, '~' represents the Home folder. 

- cd /root  // this nagivates to root directory , when u do pwd it is '/root'
- cd        // To navigate to users home directory
- cd /      // To go to the primary directory of all the directories, when u do pwd it is '/'
- cd ~      // To navigate to users home directory of the user as u r logged in
- Directories or Folders which have space in them such as "My Folder" cannot be directly navigated by 'cd' So we can do
    - cd My\ Folder (to go in "My Folder" directory)
    - cd "My Folder"
    - cd 'My Folder'

- ls /                  // to list all the things in root directory
- ls ~                  // to list all the things in user's home directory
- ls ..                 // to list things one step or directory which was previously
- ls ../..              // to list things two directories back
- ls -l                 // to show the more info and detailed things about directories of files present
- ls -a                 // this will list the hidden files also
- ls -R                 // to see the whole directory structure with files in them hierchial wise
- ls -ld directory_name // to show full details of the directory
- ls /home/             // to know the users and their directory
- ls -lS                // to list and sort directories and files by size
- ls Documents/*.html   // this is to list all the files which have extension of html
- ls Documents/*.*      // this is to list all the files with all extension
- ls -lS > out.txt      // to overwrite all the contents to a file, here we r saving it in out.txt file which would be
                        // created if not present and if it is present it will overwrite all the previous data
- ls -d */              // to list all the directories


## Directory Listing Attribute
- cat -b filename // this will show contents with line no.'s except the blank lines they won't we numbered
- cat -n filename // this will show contents with line no.'s and also for the the blank lines
- cat -s filename // this squeses the extra blank line and only show data with one blank line between the contents
- cat -E filename // this adds a $ symbol at the end of each line

- cat filename1 filename2 > filename3 // this will add the data of filename1 and filename2 and store it in filename3
- cat filename1 >> filename2 // this will add the data of filename1 to filename2

- mkdir folder1/folder2  // this will create folder2 directory inside the existing directory folder1, folder1 should exists
                         // otherwise it give error     
- mkdir -p folder1/folder2 // to create the whole directory structure means for the all directories and sub directories which
                           // does not exists will be created
- mkdir -p folder1/{folder2,folder3} // this will create two folders folder2 and folder3 inside folder1


- rmdir options directory_name      // syntax for rmdir
- rmdir directory_name              // to remove the directory
- rmdir folder1/folder2/folder3     // this will remove only folder3 from the directory structure
- rmdir -p folder1/folder2/folder3  // this will remove all the folders only their should not be any file present in any
									// folder
- rmdir -pv folder1/folder2/folder3 // v is for verbose mode which dispalys extended information and this will remove all
                                    // the folders and show process step by step


- cp file1 file2 dir1           // this will copy file1 and file2 both to dir1 directory and if suppose file1 is already
                                //  present in the directory then it will be overwritten by the new file
- cp -i file1 file2 dir1    // this will not let file1 to be overwritten in dir1 if it exists as it asks before overwritting
- cp ../file1 ../file2 .    // '.' here represents the destination directory which is current directory and the file1 and
                            // file will be copied to current directory, So use '.' if u r in that directory otherwise use
                            // some else path as u desrire for destination
- Ex -> cp file1_path file2_path destination_directory_path
- cp dir1 dir2              // if dir2 doesn't exists then it will give error
- cp -R dir1 dir2           // using -R flag will now create dir2 directory and then copy the data of dir1 to dir2 but if
                            // dir2 and files exists then it will copy the dir1 directory to dir2 also


- mv -i file1 dir1      // this will ask before overwriting file1 if it already exists in dir1
- mv dir1 dir2          // this will move dir1 to dir2 and if dir2 doesn't exist then dir2 will be created but in the case of
                        // non existing of the directory the dir1 will not be move to dir2 instead the contents of dir1 will
                        // be moved to dir2
			
- 'less' cmd is used for reading the file or to search something inside the file, 'less' is better then the cat cmd to read
  the  file contents as the size of the opened terminal window will not create any hurdle to display the data which was too
  big and we were not able to scroll further in terminal
- less filename     // to read the data from the file and scroll the content of file as u proceed by scrolling
    - press space after executing above cmd will display the data on terminal page by page
    - press shift + B to go up the pages
    - press shift + G to go at end of the file
    - press g       // this go at the top of the file
    - /book         // this is search for the 'book' keyword in file and to go to next 'book' in file press 'n'
    - ?book         // to search for 'book' in file from down to up
    - press 'q' to quit from less


- echo string or echo "string"          // to display the string it is best practice to use "" with string
- myvar="Sadanand"                      // This is variable initialization, don't provide space before and after '='
  echo $myvar                           // to display the value of 'myvar' variable
- echo "My name is $myvar"              // to use variable to display string
- echo -e 'Some \text'                  // here 't' of word 'text' will be escaped bcz we use -e, O/P -> Some ext
- echo -e 'Some \n text'  // o/p -> Some
                                    text
                                    
                                    
- which cmd is used to return the path name of a file or a command which we use with this 'which' cmd
- which ls //to know the location of the ls cmd
- In bash scripting it is gud practice to use the full path name as we should use -> '/bin/ls' instead of just 'ls' , bcz some
  OS recognize the 'ls' cmd and some will require u to enter the full path for the 'ls' cmd


- 'whatis' cmd will display short manual page discription for cmd -> whatis ls


- 'useradd' cmd is used to create a user
- sudo useradd user_name -m -s /bin/bash -g users -c "Coments"      // -m is going to create a default home directory for this
                                                                    // user, -s is used for allowing the user to use the shell
                                                                    // which we provide and here it is bash 
                                                                    // -g is the default user flag and user will be assigned to 
                                                                    // the group u mention, always use -g flag with the 'users'
                                                                    // group, -c flag is used for providing the comments

- 'userdel' cmd is used to delete the user
- sudo userdel user_name // it will delete the user but it will not delete the directory of the user which u can see by using          
  cmd -> ls /home/, Hence the user will be deleted but his data will not
- sudo userdel -r user_name   // this will delete the home directory also with the user
- sudo rm -r /home/mark/      // this will remove all the data of the user, So use it carefully


- groups                 // this will show u that to which groups ur current user is connected too.
- cat /etc/group         // to list all the groups which r available on ur OS
- sudo groupadd name_of_group           // to add the new group
- sudo groupdel name_of_group           // to delete the group
- sudo gpasswd -a user_name group_name  // assign user to a group
- sudo gpasswd -d user_name group_name // to remove user from the group


- .bashrc file is a script that is executed whenever a new terminal session is started in interactive mode
- when u do -> ls -a , in ur root directory u can see a file .bashrc in the list, whenever u open a new terminal this .bashrc
  file is executed
- nano .bashrc          // to see the contents of the file
- gedit .bashrc         // this will also open the file, gedit is also an notepad kind of editor
- In some linux systems this .bashrc file exists and in some not, if it is present then it is OK otherwise u can create ur own
- whatever u add in to the script of the bashrc file it will we executed first whenever u open a new terminal session
- Ex -> edit and add -> echo "This is test code" in the .bashrc file and the text will we displayed when ever u open terminal 
- or try adding code -> alias ls='ls --color=auto -l' in the .bashrc file and now when ever u will do 'ls' it will do 'ls -l'
  with the auto color. So here we changed the functionality of 'ls' cmd with 'ls -l'
- We generally use .bashrc file for setting up the environment variables such as for JAVA, or for git etc


Note -> If U get permission denied while listing of files with any command then use 'sudo' with that cmd


Free resources and Used Resources ->
- df        // this cmd reports the amount of Disk space being used and avilable by ur file system
- df -h     // displays the data in more human readable format
- du        // this cmd is used to estimate and display disk space used by files, navigate into the directory on which u wants
            // to use this cmd and in the last of all listing it will shoe u the size of the folder
- du -h     // displays the data in more human readable format
- du -sh    // '-s' is for summary , 'h' is for human redable, this will calculate the disk space and all of it used
- du -sh foler_name     // to know the details for the following folder
- free      // dispalys the total amount of free and used physical and swap memory in the system as well as the buffer used by
            // the kernel, the data associated by the title-> -/+ buffers/cache // displays the whole memory used by ur machine
- free -b   // 'b' is for byte we can also use 'k' in place of 'b', k is for kilobyte , 'm' is for megabyte, 'g' for gigbyte and
            // 't' for terabyte
            
            
- 'watch' cmd can run scripts or cmds at a regular interval or repeatedly 
- watch free -m         // and u will free after every 2 seconds the command is executed again and data is refreshed
- press ctrl + c        // to come come out of watch cmd
- watch -n no_of_seconds free -m    // u can enter the no of seconds to tell after what time interval the watch has to repeat
                                    // the cmd


- tail -f file_name         // this will print the last 10 lines but the terminal session for 'tail' would not be ended ,-f flag
                            // stands for follow, this would be helpfull when u input or output things   - (Not Clear)


- find cmd is to search for files in the directory hierachy
- find directory_name_or_path -name file_name       // syntax for find cmd
- find directory_name_or_path -name file_name.*     // this will search for the file_name with all extensions
- find directory_name_or_path -name *.txt           // this will search for the files with extension txt
- find directory_name_or_path -name file_name*      // this will search for all files name file_name
- find / -name file_name                            // here we r starting search from root directory by giving '/'
- find location_to_search_in -mtime -1  // when u forgot the name of the file and the location of the file then use this cmd
                                        // as it will look in the suggested location and -mtime flag is used to set the time
                                        // period here we r using '-1' which means we r looking for file created 1 day ago to
                                        // till now and if u input '1' then it will only look for files created 1 day ago


- 'cal' cmd is used to display conventionally formated calender on cmd line
- cal       // it will display calender, we can also use cmd -> cal -1 // it will gave same output  
- ncal      // this will display calender in different format
- cal year_no       // it will display all the months for input year
- cal month_no year_no      // to display monthly calender for the input month and year
- cal -3            // this will o/p calender for current month, previous month and next month


- 'date' cmd is used to print or change the value of system time and date information
- date                  // it display current date and time
- date -s "11/20/2003 12:48:00"     // this will set the input time as the system time
- date +%d%h%y                      // this will specify the at current day,month and year, we can use them seperately also
                                    // like this date +%h, o/p -> 04Jan17
- date "+%d-%h-%y"                  // o/p -> 04-Jan-17
- man date                          // for more flags to be used with 'date' cmd




- apt-get is a cmd line tool used to work with apt(Advanced Packaging Tool) software packages
- sudo apt-get update       // it will resynchronize ur local package file and these package files r save in the location
                            // as -> /etc/apt/sources.list and all the repositories for package list r mentioned their
- sudo apt-get install package_name         // to install the package
- sudo apt-get remove package_name         // to uninstall the package but will not remove all the configuration from system
                                           // means the dependencies of the package
- sudo apt-get remove --purge package_name  // this will remove all the dependencies and files related to the package and
                                            // package itself
- sudo apt-get autoremove                   // when u wants to remove files and softwares which r not going to be used by their
                                            // parent software anymore, Use this cmd carefully and check the things getting
                                            // removed before executing it completely
                                            

- 'tar' cmd is used to create, maintain, modify and extract files which r archived in the tar(Tape Archive) format, tar is an
  archiving file format just like zip file
- tar -cvf        // 'c' for creating an archive, 'v' for verbose, 'f' allows u to specify the file name if it not used then
                  // linux is going to create a Zip file which is going to be system dependent and it's name is not defined
                  // by u
- tar -cvf  name_of_file_u_wants_to_give.tar file_name_which_has_to_be_compresed  // this will compress the file to tar, it's
                                                                                  // better to give .tar extension in the name
                                                                                  // for the file u r going to create
- tar -xvf  name_of_tar_file        // to will decompress the file
- tar -czvf name_of_file_u_wants_to_give.tar.gz file_name_which_has_to_be_compresed //here 'z' will create the file with gz
                                                                                    // format
- tar -xzvf file_name.tar.gz        // to decompress gz format file


Note - if u get the .part on doing the ls while the downloading is going on then it means the download is only partially
        complete

Enable ssh ->
  - ssh     // to check if 'ssh' is avialable on system or not
  - ssh user_name_of_remote_server@ip_address_of_Server -p port_no    // syntax for the ssh connection
  - ssh localhost // to check if 'ssh' server is installed on the system, here we r trying to connect to our localhost via ssh
                  // if the output is like this -> 'ssh : connect to host localhost port 22:Connection refused' then that means
                  // the open ssh server is not installed on ur system
  - sudo apt-get install openssh-server   // to install the open ssh server
  - sudo service ssh status // if in output it is sying somewhere 'active running' then that means the open ssh server is 
                            // running on ur system
  - sudo nano /etc/ssh/sshd_config    //then search for text 'What ports' and under it here u can change the default ssh port
  
  
- 'scp' cmd is used to copy files and directories from ur local machine to a remote server ur vice versa
- scp file_name username_of_Remote_server@ip_of_Remote_Server:location_on_remote_Server // then enter the remote server
                              // password and then the file would be send securely to remote server
- scp -r directory_name username_of_Remote_server@ip_of_Remote_Server:location_on_remote_Server // to send the directory 
- scp username_of_Remote_server@ip_of_Remote_Server:location_on_file_from_remote_Server location_on_system_to_copy_file    
    // to copy file from remote server to own system
    
    
- ctrl + alt + up arrow (to swith between the workspaces of the linux(kali linux))

- sudo ifconfig eth0 192.168.0.1 netmask 255.255.255.0 // to change IP4 address


- init command -> https://www.lifewire.com/how-to-use-the-init-command-in-linux-4066930

- nslookup -> It is used for quering and testing DNS resolution and also for DNS troubleshooting, nslookup is in both Windows and Linux
cmd -> nslookup google.com // this will cause nslookup to contact DNS server that is configured locally on this computer and display
all the DNS records for google.com, the DNS server which this client is using  is the domain controller 'nydc1'
- on firing the above cmd again u will see that the new line is added as "Non-authoritative answer", this indicates that the response
has come from a non authoritative source most likely from a DNS cache// this is happened bcz the network has asked a local DNS server to
resolve the DNS name google.com, the DNS server will 1st look in its cache to see if it has the DNS records for google.com, if the DNS 
server doesnot know the anwser it will contact the an Authoritative DNS server for google now the DNS records will be transfered from
the authoratative DNS server to the work station and a copy of the DNS records will be stored in the cache of the DNS server, in this case
the nslookup will report these records is coming from a authoratative server this is bcz the DNS records essentially came from the authoratative
DNS server even though they had to has through another DNS server in order to get to the workstation
- when nslookup was run the 2nd time, this time the DNS server has the DNS records in its cache so it transferred the copy to the
work station, this is why it was indicating as "Non-authoritative answer" on 2nd run as the local server with DNS installed on it is
performing the resolving process
- If this server was instead configured to forward DNS requests to the ISPs DNS server or a public DNS server their is good chance that
these records have been already be resolved and r in the ISPs DNS cache for this reason when using nslookup make sure that u r aware that
when u see a "Non-authoritative answer" this is essentially a cached copy of the original DNS record and for this reason the DNS record
may not be up to date, it is important when trouble shooting DNS related problems to pick up little clues like these as to where the
resolution problems r occuring
- cmd -> nslookup // this time the prompt changes and it goes to the interactive mode of nslookup
> website_name // u will get the DNS records for that website
> ls website_name // this will give an error cmd saying Query refused bcz here nslookup is attempting to perform a zone transfer which is
not configured in the security of the zone, to configure zone transfers in windows u need to run DNS under the tools menu in Server manager
application settings -> https://www.youtube.com/watch?v=8WIHluQaEbs time 5:12, to configure in windows
> ls website_name // after configurations, now this time more DNS records will appear

// u can use some switches in the nslookup interactive mode as
- -a list cannonical names and aliases	// ex -> ls -a website_name
- -d list all records
- -t TYPE list records of the given type -> A, CNAME, MX, NS, PTR and so on
// we can also use the set cmd as
- root=NAME - set root server to NAME
- type=X - set query type, X can be A, ANY, CNAME, MX, NS, PTR, SOA, SRV, all	// ex -> set type=ns
- server NAME - set the DNS server used // ex -> server ip_address
-----------------------------------------------------------------------------------------------------------------------------

Fedora and Centos ->

- apt-get replaced by yum or dn

-----------------------------------------------------------------------------------------------------------------------------

Ubuntu ->

- Open terminal -> ctrl + alt + t

- ctrl + shift + t -> to open multiple tabs of the terminal

- lsb_release -a  //to know the version of ubuntu 

- shutdown // to shutdown

- sudo shutdown -P now  // to shutdown immediately

- shutdown -r // to restart

- sudo pm-suspend   // to sleep


-------------------------------------------------------------------------------------------------------------------------------

@ -> https://www.youtube.com/watch?v=V8EUdia_kOE  - Pending

- sudo !! // if u write a cmd but the shell tells u that u need to use sudo for that then instead of writing whole cmd again and 
             then typing sudo in front on it we can use this cmd here '!!' represents the last entered cmd

- ctrl + k // place the cursor in between the characters u want in a string and then press 'ctrl + k' the characters after the
              cursor would be cut
  Ex -> aaa bbb ccc ddd // now if we put the cursor after 'bbb' and press 'ctrl + k' then the 'ccc' and 'ddd' will be removed

- ctrl + y // to get back the characters removed by the 'ctrl + k'

- ctrl + u // removes the text before the cursor it works in opposite direction of 'ctrl + k'

- ctrl + w // it deletes the words backward on the basis of the spaces
----------------------------------------------------------------------------------------------------------------------------

- net -> It's a tool for administration of Samba and remote CIFS servers
 net cmds -> https://www.lifewire.com/net-command-2618094
 net send -> https://www.lifewire.com/net-send-2618095
 net use cmds -> https://www.lifewire.com/net-use-command-2618096
 net user cmds -> https://www.lifewire.com/net-user-command-2618097
 
- msg cmds -> https://www.lifewire.com/msg-command-2618093
